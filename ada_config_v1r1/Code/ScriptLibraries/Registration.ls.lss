'++LotusScript Development Environment:2:5:(Options):0:74
%REM
	Library registration
	Created Jun 24, 2017 by Fernando Rodriguez/SASA
	Description: Comments for Library
%END REM
Option Public
Option Declare

Use "ErrorLogClass.ls"

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Class usr
Declare Sub Initialize
Declare Sub AddUserToGroup( ByVal fullname As String, ByVal group As String, nab As NotesDatabase )
Declare Sub AddUserToNab(dbPeople As NotesDatabase, usuario As usr)

'++LotusScript Development Environment:2:5:(Declarations):0:10
%REM
	Class usr
	Description: Clase usuario 
	Esta clase luego se pasa a la funcion AddUserToNab y crea el usuario con los datos
%END REM
Class usr
	Private LastName As String
	Private FirstName As String
	Private UserName As String
	Private PhoneNumber As String
	Private MailAddress As String
	Private HTTPPassword As String
	Private Profiles As String
	Private CodigoAdministracion As String

	Sub New(strLastName As String,strFirstName As String, strUserName As String ,strPhoneNumber As String, strMailAddress As String, strHTTPPassword As String, strProfiles As String)
		Me.LastName = strLastName
		Me.FirstName = strFirstName
		Me.UserName = strUserName
		Me.PhoneNumber = strPhoneNumber
		Me.MailAddress = strMailAddress
		Me.HTTPPassword = strHTTPPassword
		Me.Profiles = strProfiles
		Me.CodigoAdministracion = "" 
	End Sub
	
	%REM
		Function getLastName
		@return: el apellido del usuario
	%END REM
	Function getLastName() As String
		getLastName= LastName
	End Function
	
	%REM
		Function getFirstName
		@return: el nombre del usuario
	%END REM
	Function getFirstName() As String
		getFirstName= FirstName
	End Function
	
	%REM
		Function getUserName
		@return: el usuario del usuario
	%END REM
	Function getUserName() As String
		getUserName= UserName
	End Function
	
	%REM
		Function getPhoneNumber
		@return: el telefono del usuario
	%END REM
	Function getPhoneNumber() As String
		getPhoneNumber= PhoneNumber
	End Function
	
	%REM
		Function getMailAddress
		@return: el mail del usuario
	%END REM
	Function getMailAddress() As String
		getMailAddress= MailAddress
	End Function
	
	%REM
		Function getHTTPPassword
		@return: la contraseña del usuario
	%END REM
	Function getHTTPPassword() As String
		getHTTPPassword= HTTPPassword
	End Function
	
	%REM
		Function getProfiles
		@return: Si es el usuario de seguridad
	%END REM
	Function getProfiles() As String
		getProfiles= Profiles
	End Function
	
	
	%REM
		Function getCodigoAdministracion
		@return: el codigo de administración
	%END REM
	Function getCodigoAdministracion() As String
		getCodigoAdministracion = CodigoAdministracion
	End Function
	

	%REM
		Sub setCodigoAdministracion
		Setea el codigo de administracion
	%END REM
	Sub setCodigoAdministracion(codigo)
		Me.CodigoAdministracion = codigo
	End Sub
	
	
End Class
'++LotusScript Development Environment:2:2:Initialize:1:10
Sub Initialize
	
End Sub





'++LotusScript Development Environment:2:2:AddUserToGroup:8:8
%REM
	TODO: documentar
	AddUserToGroup
	Description: Agrega un usuario a un grupo
	@Param: fullname, es el nombre de usuario??
	@Param: group, es el grupo al que voy a aagregar el usuario  
%END REM
Sub AddUserToGroup( ByVal fullname As String, ByVal group As String, nab As NotesDatabase )
	Dim errorLog As New ErrorLog( "AddUserToGroup" )
	On Error GoTo ErrorHandler
	
	' Load up our static groups view
	
	Dim groups As NotesView
	
	Set groups = nab.GetView( "Groups" )
	
	Dim groupMainDoc As NotesDocument
	Set groupMainDoc = groups.GetDocumentByKey( group )
	Dim saveGroupMainDoc As Integer
	saveGroupMainDoc = False
	
	If groupMainDoc Is Nothing Then
		Set groupMainDoc = New NotesDocument( nab )
		groupMainDoc.Form = "Group"
		groupMainDoc.ListName = group
		groupMainDoc.Members = group & " 1"
		groupMainDoc.GroupType = "0"
		Call groupMainDoc.ComputeWithForm( False, False )
		saveGroupMainDoc = True
	End If
	
	Dim groupMainMembers As NotesItem
	Set groupMainMembers = groupMainDoc.GetFirstItem( "Members" )
	
	' Find last subgroup entry in the members list
	
	Dim subGroup As String
	subGroup = ""
	ForAll s In groupMainMembers.Values
		If Left$( s, Len( group ) ) = group Then
			subGroup = s
		End If
	End ForAll
	
	' Open the subgroup, and keep trying until we find one with room
	
	Dim groupNum As Integer
	groupNum = 0
	
	' Which subgroup was the last one
	If subGroup <> "" Then
		groupNum = Val( Right( subGroup, Len( subGroup ) - Len( group ) - 1 ) )
	Else
		groupNum = 1
		subGroup = group & " 1"
	End If
	
	Dim groupSubDoc As NotesDocument
	
	Do
		Set groupSubDoc = groups.GetDocumentByKey( subGroup )
		
		If groupSubDoc Is Nothing Then
			' Create a new subgroup document
			Set groupSubDoc = New NotesDocument( nab )
			groupSubDoc.Form = "Group"
			groupSubDoc.ListName = subGroup
			groupSubDoc.GroupType = "0"
			Call groupSubDoc.ComputeWithForm( False, False )
			
			' Add it to the main group if needed
			If Not groupMainMembers.Contains( subGroup ) Then
				Call groupMainMembers.AppendToTextList( subGroup )
				saveGroupMainDoc = True
			End If
		End If
		
		' See if the subgroup still has room, if so, we've found our subgroup
		
		Dim groupSubMembers As NotesItem
		Set groupSubMembers = groupSubDoc.GetFirstItem( "Members" )
		
		If groupSubMembers.ValueLength < 10000 Then
			Exit Do
		End If
		
		' If no room, try the next one
		
		groupNum = groupNum + 1
		subGroup = group & " " & groupNum
	Loop
	
	' Finally: add the user to the subgroup
	Call groupSubMembers.AppendToTextList( fullname )
	Call groupSubDoc.Save( False, True )
	
	If saveGroupMainDoc Then
		Call groupMainDoc.Save( False, True )
	End If
	Exit Sub
ErrorHandler:
	Call errorLog.PrintError( Err(), Erl(), Error )	
End Sub


'++LotusScript Development Environment:2:2:AddUserToNab:8:8
%REM
	Sub AddUserToNab
	Description: Agrega los datos del objeto usuario a un nuevo usuario del NAB adicional
	@Param: Database ADA3D names adicional
	@Param: Objeto con datos de usuario  
	@Return: no tiene es un sub
%END REM
Sub AddUserToNab(dbPeople As NotesDatabase, usuario As usr)
	Dim errorLog As New ErrorLog( "AddUserToNab" )
	On Error GoTo ErrorHandler
	
	Dim docPerson As NotesDocument
	
	Set docPerson = New NotesDocument( dbPeople )
	docPerson.Form = "Person"
	docPerson.Type = "Person"
	docPerson.LastName		= usuario.getLastName()
	docPerson.FirstName		= usuario.getFirstName()
	docPerson.FullName		= usuario.getUserName()
	docPerson.PhoneNumber	= usuario.getPhoneNumber()
	docPerson.MailAddress	= usuario.getMailAddress()
	docPerson.HTTPPassword	= usuario.getHTTPPassword()
	docPerson.Profiles		= usuario.getProfiles()
	docPerson.CompanyName	= usuario.getCodigoAdministracion()
	
	Call docPerson.ComputeWithForm( False, False )
	Call docPerson.Save( False, True )
	Exit Sub
	
ErrorHandler:
	Call errorLog.PrintError( Err(), Erl(), Error )	
End Sub













